//bfs
vector<int> bfsofgraph(int v,vector<int> adj[]){
vector<int> bfs;
vector<int> visited(v+1,0);
for(int i=1;i<=v;i++){
if(!vis[i]){
queue<int> q;
q.push(i);
vis[i]=1;
while(!q.empty()){
int node=q.front();
q.pop();
bfs.push_back(node);
for(auto it:adj[node]){
if(!vis[it]){
q.push(it);
vis[it]=1;
}}}}}
return bfs;}
//dfs

vector<int>dfsofgraph(int v,vector<int>adj[]){
for(int i=1;i<=v;i++){
if(!vis[i]){
    dfs(i,vis,adj,storedfs);
}
}return storedfs;}
void dfs(int node,vector<int>&vis,vector<int> adj[],vector<int>&storedfs){
storedfs.push(node);
vis[node]=1;
for(auto it:adj[node]){
if(!vis[it]){
dfs(it,vis,adj,storedfs);}
}
}
//check for cycle undirected graph

bool iscycle(int v,vector<int> adj[]){
vector<int> vis(v+1,0);
for(int i=1;i<=v;i++){
if(!vis[i]){
if(checkforcycle(i,v,adj,vis))return true;
}}
return false;
}
bool checkforcycle(int s,int v,vector<int> adj[],vector<int>&vis){
queue<pair<int,int>> q;
vis[v]=true;
q.push({s,-1});
while(!q.empty()){
int node=q.front.first;
int par=q.front.second;
q.pop();
for(auto it:adj[node]){
if(!vis[it]){
vis[it]=true;
q.push({it,node});
}
else if(par!=it)return true;
}}
return false;
}
// check grpah for undirected graph(dfs
bool iscycle(int v,vector<int> adj[]){
vector<int> vis(v+1,0);
for(int i=1;i<=v;i++){
if(!vis[i]){
if(checkforcycle(i,-1,adj,vis))return true;
}}
return false;
}
bool checkforcycle(int node,int parent,vector<int> adj[],vector<int>&vis){
for(auto it:adj[node]){
if(!vis[it]){
if(checkforcycle(it,node,adj,vis))return true;
}
else if(it!=parent)return true;
}
return false;}

//check for bipartite
bool checkbipartite(vector<int>adj[],int n){
int color[n];
memset(color,-1,sizeof color);
for(int i=0;i<n;i++){
if(color[i]==-1){
if(!bipartite(i,adj,color))return false;
}
}return true;}

bool bipartitebfs(int src,vector<int>adj[],int color){
queue<int>q;
q.push(src);
while(!q.empty()){
    int node=q.front();
q.pop();
for(auto it:adj[node]){
if(color[it]==-1){
color[it]=1-color[node];
q.push(it);
}
else if(color[it]==color[node]){
    return false;
}}}return true;
}
// bipartite dfs
bool checkbipartite(vector<int> adj[],int n)
{
    int color[n];
memset(color,-1,sizeof color);
for(int i=0;i<n;i++){
if(color[i]==-1){
if(!bipartitedfs(i,adj,color))return false;
}
}return true;
}
bool bipartitedfs(int src,vector<int>adj[],int color){
    if(color[node]==-1)color[node]=1;
    for(auto it:adj[node]){
        if(color[it]==-1){
            color[it]=1-color[node];
       
        if(!bipartitedfs(it,adj,color))return false;
   }
   else if(color[it]==color[node])return false;
    }
return true;
}
// cycle in directed graph
we have to use 2 visited arrays,vis and dfsvis .whenever a dfs vist is over put that value out of dfs visit

bool iscyclic(int n,vector<int> adj[]){
int vis[n],dfsvis[n];
memset(vis,0,sizeof vis);
memset(dfsvis,0,sizeof dfsvis);
for(int i=1;i<=n;i++){
if(!vis[i]){
if(!checkcycle(i,adj,vis,dfsvis)){
    return true;
}}}
return false;
}
bool checkcycle(int node,vector<int> adj[],int vis[],int dfsvis[]){
vis[node]=1;
dfsvis[node]=1;
for(auto it:adj[node]){
    if(!vis[it]){
    if(checkcycle(it,adj,vis,dfsvis))return true;
}
else if(dfsvis[it])return true;
}
dfsvis[node]=0;
return false;
}
// toposort by dfs
void findtoposort(int node,vector<int>&vis,stack<int>&st,vector<int>adj[]){
vis[node]=1;
for(auto it:adj[node]){
if(!vis[it]){
    findtoposort(it,vis,st,adj);
}
}
st.push(node);
}
vector<int> toposort(int n,vector<int> adj[]){
stack<int> st;
vector<int> vis(n+1,0);
for(int i=1;i<=n;i++)
{
if(!vis[i])findtoposort(i,vis,st,adj);
}
vector<int> topo;
while(!st.empty()){
topo.push_back(st.top());
st.pop();
}
return topo;
}

// toposort bfs kahn algorithm
vector<int> toposort(int ,vector<int> adj[]){
queue<int>q;

vector<int> indegree(n+1,0);
for(int i=1;i<=n;i++){
for(auto it:adj[i])indegree[it]++;
}

for(int i=1;i<=n;i++){
if(indegree[i]==0)q.push(i);
}
vector<int> topo;
while(!q.empty()){
int node=q.front();
q.pop();
topo.push_back(node);
for(auto it:adj[node]){
indegree[it]--;
if(indegree[it]==0){
    q.push(it);
}
}}
return topo;
}
//cycle detection in directed graph
vector<int> toposort(int ,vector<int> adj[]){
queue<int>q;

vector<int> indegree(n+1,0);
for(int i=1;i<=n;i++){
for(auto it:adj[i])indegree[it]++;
}

for(int i=1;i<=n;i++){
if(indegree[i]==0)q.push(i);
}
int cnt=0;
while(!q.empty()){
int node=q.front();
q.pop();
cnt++;
for(auto it:adj[node]){
indegree[it]--;
if(indegree[it]==0){
    q.push(it);
}
}}
if(cnt==n)return false;
return true;
}















